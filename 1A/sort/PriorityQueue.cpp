#include <iostream>
#include <string>
#include <tr1/memory>
#include <vector>
#include <stdexcept>

using namespace std;
using std::tr1::shared_ptr;

// 模拟系统资源类
class Resources
{
public:
	Resources():elemIndex(-1),datastr(""){}
	Resources(string str):elemIndex(-1), datastr(str){}
	~Resources(){}
    int getIndex(){return elemIndex;}
    void setIndex(int ind){elemIndex = ind;}
    void display(){cout << datastr << endl;}
private:
	int elemIndex;
	string datastr;
};


// elements in heap
typedef struct heapElem
{	
	int key;
	std::tr1::shared_ptr<Resources> resptr;
}baseElem;


class HeapQueue
{
public:
	HeapQueue();
	HeapQueue(int hsize);
	~HeapQueue();

	void heap_increase_key(int i, int k);
    void max_heap_insert(Resources *res, int k);
    void print();
private:
	int heapsize;
	int length;
	vector<baseElem> heap_ones;	
};

HeapQueue::HeapQueue():heapsize(0),length(20),heap_ones(20)
{
}
HeapQueue::HeapQueue(int heaplen):heapsize(0),length(heaplen),heap_ones(heaplen)
{
}
HeapQueue::~HeapQueue()
{
	heap_ones.clear();
}
void HeapQueue::print()
{
	for (int i = 0; i < heapsize; ++i)
	{
		cout << heap_ones[i].key << "   ";
		 heap_ones[i].resptr->display()  ;
	}
}
void HeapQueue::heap_increase_key(int i, int k)
{
	if (heap_ones[i].key < k)
		throw runtime_error("the added key should be larger than the orginial one.");
	heap_ones[i].key = k;

	while (i >=1 && heap_ones[(i-1)/2].key < heap_ones[i].key)
	{
		using std::swap;
		std::swap(heap_ones[(i-1)/2], heap_ones[i]);
		heap_ones[(i-1)/2].resptr->setIndex(i);
		heap_ones[i].resptr->setIndex((i-1)/2);
		i = (i - 1 ) / 2;
	}


}
void HeapQueue::max_heap_insert(Resources *res, int k)
{

	if(heapsize == length)
		throw runtime_error("room is run out of. need to reallocated!");

	// generate heap element
	
	baseElem be;
	be.key = k; // set priority
	(*res).setIndex(heapsize);// save index point to heap-elements index
	std::tr1::shared_ptr<Resources> pRes(res);	// res must come from pointer generated by new operator
	be.resptr = pRes;// set pointer	 
	heap_ones[heapsize] = be;  
    heap_increase_key(heapsize, k);
   
    heapsize = heapsize + 1;    
    
}



//   main function   //
int main()
{
	Resources *r1 = new Resources("1 resource, hello world");
    Resources *r2 = new Resources("6 resource, my husband");
    Resources *r3 = new Resources("3 resource, miss bear.");
    Resources *r4 = new Resources("9 resource, Ethan Hunt");
    Resources *r5 = new Resources("8 resource, Caleb Rivers");
    HeapQueue hq;
    hq.max_heap_insert(r1, 1);
    hq.max_heap_insert(r2, 6);
    hq.max_heap_insert(r3, 3);
    hq.max_heap_insert(r4, 9);
     hq.max_heap_insert(r5, 8);

    hq.print();
    cout << "done !!!" << endl;
	return 0;
}